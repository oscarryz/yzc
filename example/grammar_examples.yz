// Yz grammar examples
program: block_body
block_body: [
    expressions
    statements
]
expressions: [
    block_invocation
    method_invocation
    parenthesis_expression
    literals
    literal_non_word_invocation
    array_access
    dictionary_access
    variable
    member_access
]
statements: [
    variable_definition
    variable_declaration
    block_declaration_opt_block_literal
    block_definition
    return_opt_expressions
    continue_stmt
    break_stmt
]

 variable: variable_identifier

 "CHARACTER+"
 variable_identifier: [ character ]

// Examples begin
// Expressions

// variable_identifier
 main: {
   num: 1
   msg: {
       s String
   }
   << : {
     s String
   }
 }
 /*
    block_invocation ::=  variable invocation_args
                     | variable named_invocation_args
 */
block_invocation: {

    // variable
    // invocation_args ::= "(" ")"
    //            | "(" (expression)+ ")"
    //            |  (expression)+
     main()
     main(1)
     main 1 + 2
     //named_invocation_args ::= "(" (identifier ":" expression)* ")"
     main(num:1)
     // non_word_invocation ::= (" ")+ punctuation_identifier (" ")+ expression+

     main << "Hello"
 }
 /*
    method_invocation ::= member_access block_invocation
                     | member_access non_word_invocation
 */
 method_invocation: {
    // member_access ::= variable ("." variable)+
    // invocation_args ::= "(" ")"
    //            | "(" (expression)+ ")"
    //            |  (expression)+
    main.msg()
    main.msg("hi")
    main.msg "hello"
    // variable named_invocation_args
    main.msg(s: "hey")
    // non_word_invocation ::= (" ")+ punctuation_identifier (" ")+ expression+
    main.num + 1
 }
parenthesis_expression: {
    (main.msg "hi").len()
}
literals: {
  {}    // block
  1     // int
  1.0   // decimal
  “s”   // string
  []    // empty (and generic) array
  [1 2 3] // array
  [:]   // empty (and generic) dictionary
  [“k1”:”v1”
   “k2”:”v2”] // dictionary
}
literal_non_word_invocation: {
   [] << 1 + 2  // add (1 + 2) to the empty array
}
array_access: {
   [1 2 3][0] // returns 1
   [1 2 3][0] = 10 // is now [10 2 3]
   // same as above but using a variable
   a: [1 2 3]
   a[0]
   a[0] = 10
}
dictionary_access: {
    ["key": "value"]["key"] // returns "value"
    ["key": "value"]["key":"new_value"] // is now ["key":"new_value"]
   // same as above but using a variable
   d:["key": "value"]
   d["key"]
   d["key":"new_value"]
}
// Statements
variable_declaration : {
    a String b String 
}

