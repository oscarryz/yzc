// [] optional
// ? zero or one
// +  One or more
// * zero or more
// () Grouping
// |  Or

program ::=  block_body

block_body ::= (expression | statement) ("," (expression | statement))* | ""


//////////////////////////////////
// Expressions
//////////////////////////////////
expression
  ::= block_invocation
    | method_invocation
    | parenthesized_expressions
//    | literal_non_word_invocation
    | type_instantiation
    | array_access
    | dictionary_access
    | member_access
    | literal
    | variable
    | assignment


// Invocation
// b()
// foo.bar()()
// foo ++ bar ()
block_invocation
  ::=  expression invocation

// a.b(1)
method_invocation
  ::= member_access invocation

// ( 1, 2 )
parenthesized_expressions 
  ::= "(" expression | ("," expression)* ")"

// Point( 1, 2 )
type_instantiation
  ::= type parenthesis_invocation

// ( arg1, arg2 ) | ( named_arg1: arg1, named_arg2: arg2 )
parenthesis_invocation
  ::= "(" ")"
  | "(" expression ("," expression)* ")"
  | "(" expression ":" expression ("," expression ":" expression)* ")"


// + 1 | << 1 , 2
non_parenthesis_invocation
   ::= nonword_identifier expression ("," expression)*

invocation
  ::= parenthesis_invocation
    | non_parenthesis_invocation

// Array access
array_access
  ::= array_read | array_write

// a["key"]
array_read
  ::= array_instance "[" expression "]"

// a["key"] = "value"
array_write
  ::= array_instance "[" expression "]" "=" expression

array_instance
  ::= variable | array_literal | array_expression

array_expression
   ::= "" // any expression that results in an array reference

// Dictionary access
dictionary_access
  ::= dictionary_read
    | dictionary_write

// d["key"]
dictionary_read
 ::= dictionary_instance "[" expression "]"

// d["key":"new_value"]
dictionary_write
 ::= dictionary_instance  "[" expression ":" expression "]"

dictionary_instance
  ::= variable
    | dictionary_literal

// member access
member_access
  ::= expression  ("." variable)+


// Literals
literal
  ::= block_literal
    | number_literal
    | decimal_literal
    | string_literal
    | array_literal
    | dictionary_literal

// { 1,  s: "hi"  }
block_literal
  ::= "{" block_body "}"

// - 2
number_literal
  ::= ["-"]('0-9')+

// - 1.2
decimal_literal
  ::= ["-"]('0-9')+ "." ('0-9')+

// "double quote" 'single quote' `backtick quote`
string_literal
  ::= "\"" PRINTABLE* "\""
    | "'" PRINTABLE*  "'"
    | "`" PRINTABLE* "`"
string
  ::= string_literal


// ["a" "b" "c"]
array_literal
  ::= "[" expression* "]" //expressions of the same type
  | "[" "]"  // empty if type is know at declaration
  | "[" "]" type // empty array of given type for shorthand

// ["k1": "v1" "k2":"v2]
dictionary_literal
  ::= "[" ( expression ":" expression )* "]" // expressions don't have to be the same type
  | "[" ":" "]" // empty dictionary of if types are knows at declaration
  | "[" type "]" type // empty dictionary of given types for shorthand

assignment
  ::=
    variable+ "=" expression+

variable::= variable_identifier


//////////////////////////////////
// Statements
//////////////////////////////////
statement
    ::= [string] variable_definition
      | [string] variable_declaration
      | [string] new_type_declaration
      | [string] new_type_definition
      | "return" expression*
      | "continue"
      | "break"


// a: 1
// b: dict["key"] = "suffix"
variable_definition
    ::= variable+ ":" (expression)+
    |   variable type "=" expression

// a Int
// b
// a []Int
// c [String:Int]
// d ()
// e (f A)
// g (String,String)
variable_declaration
  ::= variable type
    | variable array_declaration
    | variable dictionary_declaration
    | variable block_signature

// ( A , x Int, String, String, e E )
block_signature
  ::= "(" type_member? ")"
    | "(" type_member ("," type_member )* ")"

// Point ( A , x Int, String, String, e E )
new_type_declaration ::= type_identifier block_signature [ "=" block_literal ]

type_member
  ::= variable type ["=" default_value]
    | type
    | variable ":" default_value

default_value
  ::= expression

// [String]
array_declaration
  ::= "[" type "]"

// [String : Int]
dictionary_declaration
  ::= "[" type ":" type "]"

// Definitions
// Point : { 1 s:"hi" }
new_type_definition
  ::= type_identifier ":" block_literal




// Identifiers
type ::= generic_type_identifier | type_identifier
generic_type_identifier ::= UPPER_CASE // single uppercase letter
type_identifier ::=  UPPER_CASE (variable_identifier)*
variable_identifier ::= CHARACTER+ // not start with numbers, don't contain reserved and don't start with uppercase
nonword_identifier ::= NOT A CHARACTER+// as defined by unicode, minus reserved punct
//noinspection BnfUnusedRule
reserved_char ::= "{"|"}"|"["|"]"|":"|"//"|","|"."
